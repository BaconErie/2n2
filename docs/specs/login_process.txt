-- CLIENT SIDE --

1. User GET /auth/login

-- SERVER SIDE --

2. Validate token. 
3. If token is valid, redirect to '/study' with 302
4. Return login.html static view

-- CLIENTS SIDE --

4. User submits login form
5. Onsubmit runs a JS function which POSTs JSON to /auth/login. This JSON has username and password.

-- SERVER SIDE --

6. Turn the username and password into strings.
7. Check if username is blank. If yes return 400, 'Username cannot be blank'.
8. Check if password is blank. If no return 400, 'Password cannot be blank'.
9. Get user with that username. If no users, return 404, 'User not found'.
10. Get the user's salt. Hash input password with salt and compare to correct hash. ! NOTE ! COMPARE WITH TIMING ATTACK RESISTANT METHOD
11. If input password is incorrect return 404, 'User not found'.
12. Get user id. Set cookie 'token' with value of JWT with id and time issued. ! NOTE ! COOKIE MUST BE 'SAMESITE' AND 'SECURE' (unfortunatly no custom apis :( )
13. Return 200, Success

-- CLIENT SIDE --

14. If 400 and 'Username cannot be blank', display 'Please enter a username.'
15. If 400 and 'Password cannot be blank', display 'Please enter a password.'
16. If 404, display 'User not found. Please double check your username or password.'
17. If 200, redirect to '/study'. Use replace(), so that users can't accidentally go back onto the login screen and think they have to login again